// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: ligato/vpp/policer/policer.proto

package vpp_policer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QoS Rate Types
type Sse2QosRateType int32

const (
	Sse2QosRateType_RATE_KBPS    Sse2QosRateType = 0
	Sse2QosRateType_RATE_PPS     Sse2QosRateType = 1
	Sse2QosRateType_RATE_INVALID Sse2QosRateType = 2
)

// Enum value maps for Sse2QosRateType.
var (
	Sse2QosRateType_name = map[int32]string{
		0: "RATE_KBPS",
		1: "RATE_PPS",
		2: "RATE_INVALID",
	}
	Sse2QosRateType_value = map[string]int32{
		"RATE_KBPS":    0,
		"RATE_PPS":     1,
		"RATE_INVALID": 2,
	}
)

func (x Sse2QosRateType) Enum() *Sse2QosRateType {
	p := new(Sse2QosRateType)
	*p = x
	return p
}

func (x Sse2QosRateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sse2QosRateType) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_policer_policer_proto_enumTypes[0].Descriptor()
}

func (Sse2QosRateType) Type() protoreflect.EnumType {
	return &file_ligato_vpp_policer_policer_proto_enumTypes[0]
}

func (x Sse2QosRateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sse2QosRateType.Descriptor instead.
func (Sse2QosRateType) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_policer_policer_proto_rawDescGZIP(), []int{0}
}

// QoS Rounding Types
type Sse2QosRoundType int32

const (
	Sse2QosRoundType_ROUND_TO_CLOSEST Sse2QosRoundType = 0
	Sse2QosRoundType_ROUND_TO_UP      Sse2QosRoundType = 1
	Sse2QosRoundType_ROUND_TO_DOWN    Sse2QosRoundType = 2
	Sse2QosRoundType_ROUND_INVALID    Sse2QosRoundType = 3
)

// Enum value maps for Sse2QosRoundType.
var (
	Sse2QosRoundType_name = map[int32]string{
		0: "ROUND_TO_CLOSEST",
		1: "ROUND_TO_UP",
		2: "ROUND_TO_DOWN",
		3: "ROUND_INVALID",
	}
	Sse2QosRoundType_value = map[string]int32{
		"ROUND_TO_CLOSEST": 0,
		"ROUND_TO_UP":      1,
		"ROUND_TO_DOWN":    2,
		"ROUND_INVALID":    3,
	}
)

func (x Sse2QosRoundType) Enum() *Sse2QosRoundType {
	p := new(Sse2QosRoundType)
	*p = x
	return p
}

func (x Sse2QosRoundType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sse2QosRoundType) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_policer_policer_proto_enumTypes[1].Descriptor()
}

func (Sse2QosRoundType) Type() protoreflect.EnumType {
	return &file_ligato_vpp_policer_policer_proto_enumTypes[1]
}

func (x Sse2QosRoundType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sse2QosRoundType.Descriptor instead.
func (Sse2QosRoundType) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_policer_policer_proto_rawDescGZIP(), []int{1}
}

// QoS Policer Types
type Sse2QosPolicerType int32

const (
	Sse2QosPolicerType_POLICER_1R2C             Sse2QosPolicerType = 0
	Sse2QosPolicerType_POLICER_1R3C_RFC_2697    Sse2QosPolicerType = 1
	Sse2QosPolicerType_POLICER_2R3C_RFC_2698    Sse2QosPolicerType = 2
	Sse2QosPolicerType_POLICER_2R3C_RFC_4115    Sse2QosPolicerType = 3
	Sse2QosPolicerType_POLICER_2R3C_RFC_MEF5CF1 Sse2QosPolicerType = 4
	Sse2QosPolicerType_POLICER_MAX              Sse2QosPolicerType = 5
)

// Enum value maps for Sse2QosPolicerType.
var (
	Sse2QosPolicerType_name = map[int32]string{
		0: "POLICER_1R2C",
		1: "POLICER_1R3C_RFC_2697",
		2: "POLICER_2R3C_RFC_2698",
		3: "POLICER_2R3C_RFC_4115",
		4: "POLICER_2R3C_RFC_MEF5CF1",
		5: "POLICER_MAX",
	}
	Sse2QosPolicerType_value = map[string]int32{
		"POLICER_1R2C":             0,
		"POLICER_1R3C_RFC_2697":    1,
		"POLICER_2R3C_RFC_2698":    2,
		"POLICER_2R3C_RFC_4115":    3,
		"POLICER_2R3C_RFC_MEF5CF1": 4,
		"POLICER_MAX":              5,
	}
)

func (x Sse2QosPolicerType) Enum() *Sse2QosPolicerType {
	p := new(Sse2QosPolicerType)
	*p = x
	return p
}

func (x Sse2QosPolicerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sse2QosPolicerType) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_policer_policer_proto_enumTypes[2].Descriptor()
}

func (Sse2QosPolicerType) Type() protoreflect.EnumType {
	return &file_ligato_vpp_policer_policer_proto_enumTypes[2]
}

func (x Sse2QosPolicerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sse2QosPolicerType.Descriptor instead.
func (Sse2QosPolicerType) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_policer_policer_proto_rawDescGZIP(), []int{2}
}

// QoS Action Types
type Sse2QosActionType int32

const (
	Sse2QosActionType_ACTION_DROP              Sse2QosActionType = 0
	Sse2QosActionType_ACTION_TRANSMIT          Sse2QosActionType = 1
	Sse2QosActionType_ACTION_MARK_AND_TRANSMIT Sse2QosActionType = 2
)

// Enum value maps for Sse2QosActionType.
var (
	Sse2QosActionType_name = map[int32]string{
		0: "ACTION_DROP",
		1: "ACTION_TRANSMIT",
		2: "ACTION_MARK_AND_TRANSMIT",
	}
	Sse2QosActionType_value = map[string]int32{
		"ACTION_DROP":              0,
		"ACTION_TRANSMIT":          1,
		"ACTION_MARK_AND_TRANSMIT": 2,
	}
)

func (x Sse2QosActionType) Enum() *Sse2QosActionType {
	p := new(Sse2QosActionType)
	*p = x
	return p
}

func (x Sse2QosActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sse2QosActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_policer_policer_proto_enumTypes[3].Descriptor()
}

func (Sse2QosActionType) Type() protoreflect.EnumType {
	return &file_ligato_vpp_policer_policer_proto_enumTypes[3]
}

func (x Sse2QosActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sse2QosActionType.Descriptor instead.
func (Sse2QosActionType) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_policer_policer_proto_rawDescGZIP(), []int{3}
}

// QoS Action
type Sse2QosAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Sse2QosActionType `protobuf:"varint,1,opt,name=type,proto3,enum=ligato.vpp.policer.Sse2QosActionType" json:"type,omitempty"`
	Dscp uint32            `protobuf:"varint,2,opt,name=dscp,proto3" json:"dscp,omitempty"`
}

func (x *Sse2QosAction) Reset() {
	*x = Sse2QosAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_policer_policer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sse2QosAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sse2QosAction) ProtoMessage() {}

func (x *Sse2QosAction) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_policer_policer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sse2QosAction.ProtoReflect.Descriptor instead.
func (*Sse2QosAction) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_policer_policer_proto_rawDescGZIP(), []int{0}
}

func (x *Sse2QosAction) GetType() Sse2QosActionType {
	if x != nil {
		return x.Type
	}
	return Sse2QosActionType_ACTION_DROP
}

func (x *Sse2QosAction) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

// Policer Configuration
type PolicerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cir           uint32                     `protobuf:"varint,2,opt,name=cir,proto3" json:"cir,omitempty"` // Committed Information Rate
	Eir           uint32                     `protobuf:"varint,3,opt,name=eir,proto3" json:"eir,omitempty"` // Excess Information Rate
	Cb            uint64                     `protobuf:"varint,4,opt,name=cb,proto3" json:"cb,omitempty"`   // Committed Burst
	Eb            uint64                     `protobuf:"varint,5,opt,name=eb,proto3" json:"eb,omitempty"`   // Excess or Peak Burst
	RateType      Sse2QosRateType            `protobuf:"varint,6,opt,name=rateType,proto3,enum=ligato.vpp.policer.Sse2QosRateType" json:"rateType,omitempty"`
	RoundType     Sse2QosRoundType           `protobuf:"varint,7,opt,name=roundType,proto3,enum=ligato.vpp.policer.Sse2QosRoundType" json:"roundType,omitempty"`
	Type          Sse2QosPolicerType         `protobuf:"varint,8,opt,name=type,proto3,enum=ligato.vpp.policer.Sse2QosPolicerType" json:"type,omitempty"`
	ColorAware    bool                       `protobuf:"varint,9,opt,name=colorAware,proto3" json:"colorAware,omitempty"`
	ConformAction *Sse2QosAction             `protobuf:"bytes,10,opt,name=conformAction,proto3" json:"conformAction,omitempty"`
	ExceedAction  *Sse2QosAction             `protobuf:"bytes,11,opt,name=exceedAction,proto3" json:"exceedAction,omitempty"`
	ViolateAction *Sse2QosAction             `protobuf:"bytes,12,opt,name=violateAction,proto3" json:"violateAction,omitempty"`
	Interfaces    []*PolicerConfig_Interface `protobuf:"bytes,13,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *PolicerConfig) Reset() {
	*x = PolicerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_policer_policer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerConfig) ProtoMessage() {}

func (x *PolicerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_policer_policer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerConfig.ProtoReflect.Descriptor instead.
func (*PolicerConfig) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_policer_policer_proto_rawDescGZIP(), []int{1}
}

func (x *PolicerConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicerConfig) GetCir() uint32 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *PolicerConfig) GetEir() uint32 {
	if x != nil {
		return x.Eir
	}
	return 0
}

func (x *PolicerConfig) GetCb() uint64 {
	if x != nil {
		return x.Cb
	}
	return 0
}

func (x *PolicerConfig) GetEb() uint64 {
	if x != nil {
		return x.Eb
	}
	return 0
}

func (x *PolicerConfig) GetRateType() Sse2QosRateType {
	if x != nil {
		return x.RateType
	}
	return Sse2QosRateType_RATE_KBPS
}

func (x *PolicerConfig) GetRoundType() Sse2QosRoundType {
	if x != nil {
		return x.RoundType
	}
	return Sse2QosRoundType_ROUND_TO_CLOSEST
}

func (x *PolicerConfig) GetType() Sse2QosPolicerType {
	if x != nil {
		return x.Type
	}
	return Sse2QosPolicerType_POLICER_1R2C
}

func (x *PolicerConfig) GetColorAware() bool {
	if x != nil {
		return x.ColorAware
	}
	return false
}

func (x *PolicerConfig) GetConformAction() *Sse2QosAction {
	if x != nil {
		return x.ConformAction
	}
	return nil
}

func (x *PolicerConfig) GetExceedAction() *Sse2QosAction {
	if x != nil {
		return x.ExceedAction
	}
	return nil
}

func (x *PolicerConfig) GetViolateAction() *Sse2QosAction {
	if x != nil {
		return x.ViolateAction
	}
	return nil
}

func (x *PolicerConfig) GetInterfaces() []*PolicerConfig_Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

// Policer Interface Feature
type PolicerConfig_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// policer-input feature or policer-output feature
	IsOutput bool `protobuf:"varint,2,opt,name=isOutput,proto3" json:"isOutput,omitempty"`
}

func (x *PolicerConfig_Interface) Reset() {
	*x = PolicerConfig_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_policer_policer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerConfig_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerConfig_Interface) ProtoMessage() {}

func (x *PolicerConfig_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_policer_policer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerConfig_Interface.ProtoReflect.Descriptor instead.
func (*PolicerConfig_Interface) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_policer_policer_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PolicerConfig_Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicerConfig_Interface) GetIsOutput() bool {
	if x != nil {
		return x.IsOutput
	}
	return false
}

var File_ligato_vpp_policer_policer_proto protoreflect.FileDescriptor

var file_ligato_vpp_policer_policer_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x22, 0x5e, 0x0a, 0x0d, 0x53, 0x73, 0x65, 0x32, 0x51, 0x6f,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76,
	0x70, 0x70, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x73, 0x65, 0x32, 0x51,
	0x6f, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x22, 0xab, 0x05, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x69, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x63, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x63, 0x62,
	0x12, 0x0e, 0x0a, 0x02, 0x65, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x65, 0x62,
	0x12, 0x3f, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x73, 0x65, 0x32, 0x51, 0x6f, 0x73, 0x52,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x42, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70,
	0x70, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x73, 0x65, 0x32, 0x51, 0x6f,
	0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x73, 0x65, 0x32, 0x51, 0x6f, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x77, 0x61, 0x72, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x77, 0x61, 0x72,
	0x65, 0x12, 0x47, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x73,
	0x65, 0x32, 0x51, 0x6f, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0c, 0x65, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x73, 0x65, 0x32, 0x51, 0x6f, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x0d, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x73,
	0x65, 0x32, 0x51, 0x6f, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x3b, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x2a, 0x40, 0x0a, 0x0f, 0x53, 0x73, 0x65, 0x32, 0x51, 0x6f, 0x73, 0x52,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x4b, 0x42, 0x50, 0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x50, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x02, 0x2a, 0x5f, 0x0a, 0x10, 0x53, 0x73, 0x65, 0x32, 0x51, 0x6f,
	0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x53, 0x54, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x55, 0x50, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x2a, 0xa6, 0x01, 0x0a, 0x12, 0x53, 0x73, 0x65, 0x32,
	0x51, 0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x31, 0x52, 0x32, 0x43, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x31, 0x52, 0x33, 0x43,
	0x5f, 0x52, 0x46, 0x43, 0x5f, 0x32, 0x36, 0x39, 0x37, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x32, 0x52, 0x33, 0x43, 0x5f, 0x52, 0x46, 0x43, 0x5f,
	0x32, 0x36, 0x39, 0x38, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45,
	0x52, 0x5f, 0x32, 0x52, 0x33, 0x43, 0x5f, 0x52, 0x46, 0x43, 0x5f, 0x34, 0x31, 0x31, 0x35, 0x10,
	0x03, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x32, 0x52, 0x33,
	0x43, 0x5f, 0x52, 0x46, 0x43, 0x5f, 0x4d, 0x45, 0x46, 0x35, 0x43, 0x46, 0x31, 0x10, 0x04, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05,
	0x2a, 0x57, 0x0a, 0x11, 0x53, 0x73, 0x65, 0x32, 0x51, 0x6f, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x6f, 0x2e,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x3b,
	0x76, 0x70, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ligato_vpp_policer_policer_proto_rawDescOnce sync.Once
	file_ligato_vpp_policer_policer_proto_rawDescData = file_ligato_vpp_policer_policer_proto_rawDesc
)

func file_ligato_vpp_policer_policer_proto_rawDescGZIP() []byte {
	file_ligato_vpp_policer_policer_proto_rawDescOnce.Do(func() {
		file_ligato_vpp_policer_policer_proto_rawDescData = protoimpl.X.CompressGZIP(file_ligato_vpp_policer_policer_proto_rawDescData)
	})
	return file_ligato_vpp_policer_policer_proto_rawDescData
}

var file_ligato_vpp_policer_policer_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_ligato_vpp_policer_policer_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ligato_vpp_policer_policer_proto_goTypes = []interface{}{
	(Sse2QosRateType)(0),            // 0: ligato.vpp.policer.Sse2QosRateType
	(Sse2QosRoundType)(0),           // 1: ligato.vpp.policer.Sse2QosRoundType
	(Sse2QosPolicerType)(0),         // 2: ligato.vpp.policer.Sse2QosPolicerType
	(Sse2QosActionType)(0),          // 3: ligato.vpp.policer.Sse2QosActionType
	(*Sse2QosAction)(nil),           // 4: ligato.vpp.policer.Sse2QosAction
	(*PolicerConfig)(nil),           // 5: ligato.vpp.policer.PolicerConfig
	(*PolicerConfig_Interface)(nil), // 6: ligato.vpp.policer.PolicerConfig.Interface
}
var file_ligato_vpp_policer_policer_proto_depIdxs = []int32{
	3, // 0: ligato.vpp.policer.Sse2QosAction.type:type_name -> ligato.vpp.policer.Sse2QosActionType
	0, // 1: ligato.vpp.policer.PolicerConfig.rateType:type_name -> ligato.vpp.policer.Sse2QosRateType
	1, // 2: ligato.vpp.policer.PolicerConfig.roundType:type_name -> ligato.vpp.policer.Sse2QosRoundType
	2, // 3: ligato.vpp.policer.PolicerConfig.type:type_name -> ligato.vpp.policer.Sse2QosPolicerType
	4, // 4: ligato.vpp.policer.PolicerConfig.conformAction:type_name -> ligato.vpp.policer.Sse2QosAction
	4, // 5: ligato.vpp.policer.PolicerConfig.exceedAction:type_name -> ligato.vpp.policer.Sse2QosAction
	4, // 6: ligato.vpp.policer.PolicerConfig.violateAction:type_name -> ligato.vpp.policer.Sse2QosAction
	6, // 7: ligato.vpp.policer.PolicerConfig.interfaces:type_name -> ligato.vpp.policer.PolicerConfig.Interface
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_ligato_vpp_policer_policer_proto_init() }
func file_ligato_vpp_policer_policer_proto_init() {
	if File_ligato_vpp_policer_policer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ligato_vpp_policer_policer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sse2QosAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_policer_policer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_policer_policer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerConfig_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ligato_vpp_policer_policer_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ligato_vpp_policer_policer_proto_goTypes,
		DependencyIndexes: file_ligato_vpp_policer_policer_proto_depIdxs,
		EnumInfos:         file_ligato_vpp_policer_policer_proto_enumTypes,
		MessageInfos:      file_ligato_vpp_policer_policer_proto_msgTypes,
	}.Build()
	File_ligato_vpp_policer_policer_proto = out.File
	file_ligato_vpp_policer_policer_proto_rawDesc = nil
	file_ligato_vpp_policer_policer_proto_goTypes = nil
	file_ligato_vpp_policer_policer_proto_depIdxs = nil
}
